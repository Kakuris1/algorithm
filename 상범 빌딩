#include<iostream>
#include<vector>
#include<queue>
#include<tuple>
#include<algorithm>
using namespace std;

int L, R, C;
bool route[31][31][31];
bool visited[31][31][31];
tuple<int, int, int>start_pos;
tuple<int, int, int>end_pos;
int dx[6] = { -1,1,0,0,0,0 };
int dy[6] = { 0,0,-1,1,0,0 };
int dz[6] = { 0,0,0,0,-1,1 };

int bfs()
{
	queue<tuple<int, int, int>>Q;
	Q.push(start_pos);
	visited[get<0>(start_pos)][get<1>(start_pos)][get<2>(start_pos)] = true;

	int dis = 0;
	while (!Q.empty())
	{
		int Qsize = Q.size();
		for (int q_i = 0; q_i < Qsize; q_i++)
		{
			tuple<int, int, int> curr = Q.front();
			if (curr == end_pos) {
				cout << "Escaped in " << dis << " minute(s)\n";
				return 0;
			}
			Q.pop();
			for (int i = 0; i < 6; i++) {
				int nx = get<2>(curr) + dx[i];
				int ny = get<1>(curr) + dy[i];
				int nz = get<0>(curr) + dz[i];
				if (nx >= 0 && nx < C && ny >= 0 && ny < R && nz >= 0 && nz < L) {
					if (route[nz][ny][nx] == true && visited[nz][ny][nx] == false) {
						Q.push(make_tuple(nz, ny, nx));
						visited[nz][ny][nx] = true;
					}
				}
			}
		}
		dis++;
	}
	cout << "Trapped!\n";
	return 0;
}

void reset()
{
	fill(&visited[0][0][0], &visited[30][31][31], false);
	fill(&route[0][0][0], &route[30][31][31], false);
}

int main()
{
	while (true)
	{
		cin >> L >> R >> C; // x=C, y=R, z=L;
		if (L == 0 && R == 0 && C == 0) return 0;

		reset();

		char c;
		for (int i = 0; i < L; i++)
			for (int j = 0; j < R; j++)
				for (int k = 0; k < C; k++) {
					cin >> c;
					if (c == 'S') {
						start_pos = make_tuple(i, j, k);
						route[i][j][k] = true;
					}
					else if (c == 'E') {
						end_pos = make_tuple(i, j, k);
						route[i][j][k] = true;
					}
					else if (c == '.') { route[i][j][k] = true; }
				}
		bfs();
	}
}
